generator client {
    provider = "prisma-client-js"
  }
  
  datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
  }
  
  model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    password      String?
    role          String    @default("USER")
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    tickets       Ticket[]
    communities   CommunityMember[]
    events        Event[]
  }
  
  model Event {
    id            String    @id @default(cuid())
    title         String
    description   String
    date          DateTime
    location      String
    imageUrl      String?
    price         Float
    totalTickets  Int
    soldTickets   Int      @default(0)
    waitingList   Int      @default(0)
    organizer     User     @relation(fields: [organizerId], references: [id])
    organizerId   String
    tickets       Ticket[]
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    community     Community? @relation(fields: [communityId], references: [id])
    communityId   String?
  }
  
  model Ticket {
    id        String   @id @default(cuid())
    event     Event    @relation(fields: [eventId], references: [id])
    eventId   String
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    status    String   @default("PENDING") // PENDING, CONFIRMED, CANCELLED
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
  }
  
  model Community {
    id          String    @id @default(cuid())
    name        String
    description String
    imageUrl    String?
    members     CommunityMember[]
    events      Event[]
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
  }
  
  model CommunityMember {
    id          String    @id @default(cuid())
    community   Community @relation(fields: [communityId], references: [id])
    communityId String
    user        User      @relation(fields: [userId], references: [id])
    userId      String
    role        String    @default("MEMBER") // ADMIN, MEMBER
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
  
    @@unique([communityId, userId])
  }